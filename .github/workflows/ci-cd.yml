name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # CI Job - Build and Test
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run linting
      run: bun run lint

    - name: Build application
      run: bun run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # CD Job - Deploy to Production (only on main branch)
  deploy:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (if using Docker Hub)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/re-admin-assetpro:latest
        build-args: |
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}

    # Option 1: Deploy to VPS/Server via SSH
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/re-admin-assetpro:latest
          
          # Stop and remove existing container
          docker stop re-admin-assetpro-app || true
          docker rm re-admin-assetpro-app || true
          
          # Run new container
          docker run -d \
            --name re-admin-assetpro-app \
            --restart unless-stopped \
            -p 8088:80 \
            -e VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }} \
            -e VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }} \
            ${{ secrets.DOCKER_USERNAME }}/re-admin-assetpro:latest
          
          # Clean up old images
          docker image prune -f

    # Option 2: Deploy using docker-compose (alternative)
    # - name: Deploy with docker-compose
    #   uses: appleboy/ssh-action@v1.0.3
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USERNAME }}
    #     key: ${{ secrets.SERVER_SSH_KEY }}
    #     port: ${{ secrets.SERVER_PORT }}
    #     script: |
    #       cd /path/to/your/project
    #       docker-compose pull
    #       docker-compose up -d
    #       docker image prune -f

  # Optional: Deploy to staging (develop branch)
  deploy-staging:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push staging Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/re-admin-assetpro:staging
        build-args: |
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USERNAME }}
        key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
        port: ${{ secrets.STAGING_SERVER_PORT }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/re-admin-assetpro:staging
          docker stop re-admin-assetpro-staging || true
          docker rm re-admin-assetpro-staging || true
          docker run -d \
            --name re-admin-assetpro-staging \
            --restart unless-stopped \
            -p 8089:80 \
            -e VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }} \
            -e VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }} \
            ${{ secrets.DOCKER_USERNAME }}/re-admin-assetpro:staging
          docker image prune -f 